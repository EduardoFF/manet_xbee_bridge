"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import uint32_t

import uint16_t

import uint64_t

import char

class endnodedebug_t(object):
    __slots__ = ["n_xbee_pkts_sent", "n_xbee_bytes_sent", "n_xbee_pkts_rcv", "n_xbee_bytes_rcv", "timestamp", "last_flow_notify_time", "manet_alive"]

    def __init__(self):
        self.n_xbee_pkts_sent = uint16_t()
        self.n_xbee_bytes_sent = uint32_t()
        self.n_xbee_pkts_rcv = uint16_t()
        self.n_xbee_bytes_rcv = uint32_t()
        self.timestamp = uint64_t()
        self.last_flow_notify_time = uint16_t()
        self.manet_alive = char()

    def encode(self):
        buf = BytesIO()
        buf.write(endnodedebug_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.n_xbee_pkts_sent._get_packed_fingerprint() == uint16_t._get_packed_fingerprint()
        self.n_xbee_pkts_sent._encode_one(buf)
        assert self.n_xbee_bytes_sent._get_packed_fingerprint() == uint32_t._get_packed_fingerprint()
        self.n_xbee_bytes_sent._encode_one(buf)
        assert self.n_xbee_pkts_rcv._get_packed_fingerprint() == uint16_t._get_packed_fingerprint()
        self.n_xbee_pkts_rcv._encode_one(buf)
        assert self.n_xbee_bytes_rcv._get_packed_fingerprint() == uint32_t._get_packed_fingerprint()
        self.n_xbee_bytes_rcv._encode_one(buf)
        assert self.timestamp._get_packed_fingerprint() == uint64_t._get_packed_fingerprint()
        self.timestamp._encode_one(buf)
        assert self.last_flow_notify_time._get_packed_fingerprint() == uint16_t._get_packed_fingerprint()
        self.last_flow_notify_time._encode_one(buf)
        assert self.manet_alive._get_packed_fingerprint() == char._get_packed_fingerprint()
        self.manet_alive._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != endnodedebug_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return endnodedebug_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = endnodedebug_t()
        self.n_xbee_pkts_sent = uint16_t._decode_one(buf)
        self.n_xbee_bytes_sent = uint32_t._decode_one(buf)
        self.n_xbee_pkts_rcv = uint16_t._decode_one(buf)
        self.n_xbee_bytes_rcv = uint32_t._decode_one(buf)
        self.timestamp = uint64_t._decode_one(buf)
        self.last_flow_notify_time = uint16_t._decode_one(buf)
        self.manet_alive = char._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if endnodedebug_t in parents: return 0
        newparents = parents + [endnodedebug_t]
        tmphash = (0x526cc30e9960892+ .uint16_t._get_hash_recursive(newparents)+ .uint32_t._get_hash_recursive(newparents)+ .uint16_t._get_hash_recursive(newparents)+ .uint32_t._get_hash_recursive(newparents)+ .uint64_t._get_hash_recursive(newparents)+ .uint16_t._get_hash_recursive(newparents)+ .char._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if endnodedebug_t._packed_fingerprint is None:
            endnodedebug_t._packed_fingerprint = struct.pack(">Q", endnodedebug_t._get_hash_recursive([]))
        return endnodedebug_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

